import os
import datetime
import subprocess
from dotenv import load_dotenv

from langchain_groq import ChatGroq
from langchain.prompts import ChatPromptTemplate
from langchain import hub
from langchain.agents import tool, create_react_agent, AgentExecutor

# Load environment variables
load_dotenv()

# === 🔥 LLM Setup ===
llm = ChatGroq(
    model_name="llama3-8b-8192",
    temperature=0.7,
    groq_api_key=os.getenv("groq_api_key")
)

# === 🛠️ Tool: Get Calendar Events from Apple Calendar ===
@tool
def get_calendar_events(query: str = "") -> str:
    """Fetches upcoming events from Apple Calendar."""
    script = '''
    tell application "Calendar"
        set theCalendars to calendars
        set theEvents to {}
        repeat with cal in theCalendars
            set theEvents to theEvents & (summary of events of cal whose start date is greater than (current date))
        end repeat
        return theEvents
    end tell
    '''
    result = subprocess.run(["osascript", "-e", script], capture_output=True, text=True)
    return result.stdout.strip()

# === 🛠️ Tool: Get Reminders from Apple Reminders ===
@tool
def get_reminders(query: str = "") -> str:
    """Fetches current reminders from the Apple Reminders app."""
    script = '''
    tell application "Reminders"
        set todoList to {}
        repeat with r in reminders
            set end of todoList to name of r
        end repeat
        return todoList
    end tell
    '''
    result = subprocess.run(["osascript", "-e", script], capture_output=True, text=True)
    return result.stdout.strip()

# === 🛠️ Tool: Get Current System Time (Optional Utility) ===
@tool
def get_system_time(format: str = "%Y-%m-%d %H:%M:%S") -> str:
    """Returns the current date and time in the specified format."""
    current_time = datetime.datetime.now()
    return current_time.strftime(format)

@tool
def check_user_emotion(input: str) -> str:
    """Detects emotional distress and offers support if needed."""
    if "not mentally well" in input or "sad" in input:
        return "You're not alone. Consider taking a break or talking to someone. Would you like some calming music or a breathing exercise?"
    return "OK"


# === 🧠 Prompt ===
prompt_template = hub.pull("hwchase17/react")

# === 🧰 Tool List ===
tools = [get_calendar_events, get_reminders, get_system_time]

# === 🤖 Create Agent ===
agent = create_react_agent(
    llm=llm,
    tools=tools,
    prompt=prompt_template,
)

agent_executor = AgentExecutor(
    agent=agent,
    tools=tools,
    verbose=True
)

# === 🚀 Run Agent ===
if __name__ == "__main__":
    query = input("🧠 Ask the Deep Work AI Agent (e.g., 'Find best day in this week for an outing  based on my calendar and reminders'): ")
    result = agent_executor.invoke({"input": query})
    print("\n✅ Final Output:\n", result["output"])
